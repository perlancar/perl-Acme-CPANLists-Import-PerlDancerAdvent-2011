<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Self-Contained Dancer Application | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2011" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2011">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="self_contained_dancer_application"></a>Self-Contained Dancer Application</h1>

<p>Sometimes you just need a quick-and-dirty way to setup a simple (but powerful,
feature-rich, perl-based) web-application, perhaps for personal use, or testing
purposes, or any other reason. While creating stub <b>Dancer</b> application is easy
enough, <b>Dancer</b> can work its magic even with a single file.</p>
<h4><a name="note_about_examples_"></a>Note about examples.</h4>

<p>All the examples shown in this page are fully-fledged, self-contained <b>Dancer</b>
applications. No external files are needed. To try them out, save the code in a
file (e.g. <code>example1.pl</code>), then run:</p>
<pre class="prettyprint">$ perl example1.pl
&gt;&gt; Dancer 1.3080 server 20729 listening on http://0.0.0.0:3000
== Entering the development dance floor ...</pre>

<p>Then visit <a href="http://localhost:3000">http://localhost:3000</a> to see the application in action. For better
deployment alternatives, see <a href="https://metacpan.org/module/Deployment">Deployment</a> below.</p>
<h2><a name="a_simple_example"></a>A Simple Example</h2>

<pre class="prettyprint">#!/usr/bin/env perl
use strict;
use warnings;
use Dancer;


get '/' =&gt; sub {
        return&lt;&lt;EOF;
&lt;html&gt;
&lt;body&gt;
&lt;H1&gt;Dance Dance Revolution!&lt;/h1&gt;
This is a self-contained Dancer application.
&lt;body&gt;
&lt;/html&gt;
EOF
};


dance;</pre>

<p>Try it: <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/basic.pl">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/basic.pl</a>.</p>
<p>Source:  <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/basic.txt">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/basic.txt</a>.</p>
<p>Nothing much to see here. The <b>Dancer</b> keywords (e.g. <code>get</code>, <code>dance</code>) are
well documented in <a href="https://metacpan.org/module/Dancer::Introduction">Dancer::Introduction</a> and <a href="https://metacpan.org/module/Dancer::tutorial">Dancer::tutorial</a> pages.</p>
<h2><a name="custom_settings"></a>Custom Settings</h2>

<p>By default, <b>Dancer</b> uses <code>config.yml</code> for the application's settings. But we
can easily change them from our script, and not use <code>config.yml</code> at all:</p>
<pre class="prettyprint">#!/usr/bin/env perl
use strict;
use warnings;
use Dancer;

set log =&gt; "core";
set logger =&gt; "console";
set warnings =&gt; 1;

get '/' =&gt; sub {
        return&lt;&lt;EOF;
&lt;html&gt;
&lt;body&gt;
&lt;H1&gt;Dance Dance Revolution!&lt;/h1&gt;
This is a self-contained Dancer application.
&lt;body&gt;
&lt;/html&gt;
EOF
};

dance;</pre>

<p>The <code>set</code> keyword can be used to set any configuration key, just like the
<code>config.yml</code> file. Common configuration keys are detailed in
<a href="https://metacpan.org/module/Dancer::Tutorial">Dancer::Tutorial</a>. The above code is equivalent to using the following
<code>config.yml</code> values in a normal <b>Dancer</b> application:</p>
<pre class="prettyprint">log: "core"
logger: "console"
warnings: 1</pre>

<h2><a name="using_templates"></a>Using Templates</h2>

<p><b>Dancer</b>'s template engine can be easily used in self-contained applications:</p>
<pre class="prettyprint">#!/usr/bin/env perl
use strict;
use warnings;
use Dancer;

set log =&gt; "core";
set logger =&gt; "console";
set warnings =&gt; 1;
set template =&gt; "template_toolkit";

my $index_template=&lt;&lt;EOF;
&lt;html&gt;
&lt;body&gt;

&lt;h1&gt;Hello From Self-Contained Dancer Application&lt;/h1&gt;

The answer to life the universe and everything is &lt;% answer %&gt;.
&lt;br/&gt;

Our URL is &lt;a href="&lt;% url %&gt;"&gt;&lt;% url %&gt;&lt;/a&gt;.
&lt;br/&gt;

Thanks for using Dancer!
&lt;/body&gt;
&lt;/html&gt;

EOF

get '/' =&gt; sub {
        my $t =  engine 'template';
        return $t-&gt;render(\$index_template, {
                url =&gt; request-&gt;uri_base,
                answer =&gt; 42 } );
};

dance;</pre>

<p>Try it: <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/template.pl">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/template.pl</a>.</p>
<p>Source:  <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/template.txt">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/template.txt</a>.</p>
<p><b>Notes and Limitations</b></p>
<ul>
<li>
<p>Templates are stored in simple perl variables (we're trying to be
self-contained, so no external files). The <code>$index_template</code> variable contains
the template code.</p>
</li>
<li>
<p>Using <code>set template =&gt; "template_toolkit"</code>, we're instructing <b>Dancer</b> to
use the <a href="https://metacpan.org/module/Template::Toolkit">Template::Toolkit</a> instead of the default <a href="https://metacpan.org/module/Dancer::Template::Simple">Dancer::Template::Simple</a>.</p>
</li>
<li>
<p><b>Dancer</b>'s powerful template features (e.g. <code>before_template</code>,
<code>after_template</code>) are not available.</p>
</li>
<li>
<p>We can't use <b>Dancer</b>'s <code>template</code> keyword (as it always expectes template
files stored in the <code>/views/</code> folder). Instead, we find the template engine
(<code>$t</code> in the above code) and call <code>render</code> directly.  (Future versions of
Dancer will likely allow scalar references to be passed to the <code>template</code>
keyword in order to make this easier.)</p>
</li>
<li>
<p>Normal <b>Dancer</b> applications automatically gain access to some useful variables
(e.g. <code>settings</code>, <code>request</code>, <code>params</code>, <code>vars</code>, <code>session</code>) - these <b>are
not</b> available here. You must explicitly specify each variable you want to pass
to the template engine.</p>
</li>
</ul>
<h2><a name="more_templates__and_forms_"></a>More Templates (and forms)</h2>

<p>Here's a slightly more elaborate example of using templates, asking the user for
his/her name:</p>
<pre class="prettyprint">#!/usr/bin/env perl
use strict;
use warnings;
use Dancer;

set log =&gt; "core";
set logger =&gt; "console";
set warnings =&gt; 1;
set template =&gt; "template_toolkit";

my $index_template=&lt;&lt;EOF;
&lt;html&gt;
&lt;body&gt;

&lt;h1&gt;Hello From Self-Contained Dancer Application&lt;/h1&gt;

&lt;% IF missing_name %&gt;
&lt;h2&gt;please enter your name!&lt;/h2&gt;
&lt;% END %&gt;
&lt;form action="&lt;% request.uri_for("/hello") %&gt;" method="post"&gt;
What's your name ? &lt;input type="text" name="name" size="40" /&gt;
&lt;input type="submit" name="submit" value="That's my name!" /&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;

EOF

get '/' =&gt; sub {
        my $t = engine 'template';
        my $r = request ;
        return $t-&gt;render(\$index_template, { request =&gt; $r } );
};


my $hello_template=&lt;&lt;EOF;
&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;Hello &lt;% name %&gt;!&lt;/h1&gt;

Thanks for using Dancer!
&lt;br/&gt;
&lt;br/&gt;
If that's not your name, &lt;a href="&lt;% request.uri_base %&gt;"&gt;change it.&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
EOF

post '/hello' =&gt; sub {
        my $t = engine 'template';
        my $r = request ;
        my $name = param 'name';

        return $t-&gt;render(\$index_template, { request =&gt; $r, missing_name =&gt; 1} )
                unless $name;

        return $t-&gt;render(\$hello_template, { request =&gt; $r, name =&gt; $name} );

};

dance;</pre>

<p>Try it: <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/more_templates.pl">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/more_templates.pl</a>.</p>
<p>Source:  <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/more_templates.txt">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/more_templates.txt</a>.</p>
<p><b>Notables</b>:</p>
<ul>
<li>
<p>In the template variables (<code>$index_template</code> and <code>$hello_template</code>) we use the
<code>request-&gt;uri_for</code> and <code>request-&gt;uri_base</code> methods to construct a
valid URL, but we have to pass the <code>request</code> object explicity to the template
engine.</p>
</li>
<li>
<p>In the <code>post</code> handler, we can access CGI parameters using <code>param</code>, just like
in a normal <b>Dancer</b> application.</p>
</li>
</ul>
<h2><a name="using_plugins"></a>Using Plugins</h2>

<p>Using plugins is straight-forward, just like in a normal <b>Dancer</b> application.
The following example creates a SQLite database of shapes, and allows the user
to modify and examine it:</p>
<pre class="prettyprint">#!/usr/bin/env perl
use strict;
use warnings;
use Dancer;
use Dancer::Plugin::Database;
use Dancer::Plugin::SimpleCRUD;

set template =&gt; 'template_toolkit';
set log =&gt; "debug";
set logger =&gt; "console";
set warnings =&gt; 1;
set plugins =&gt; { Database =&gt; { driver =&gt; 'SQLite', database =&gt; "foo.sqlite" } } ;

my $index_template=&lt;&lt;EOF;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h1&gt;Hello From Self-Contained Dancer Application&lt;/h1&gt;
&lt;h2&gt;(With Database plugin support)&lt;/h2&gt;

&lt;h3&gt;Add a new shape to database&lt;/h3&gt;
&lt;form action="add" method="post"&gt;
        Shape: &lt;select name="shape"&gt;
                &lt;option value="square"&gt;square&lt;/option&gt;
                &lt;option value="circle"&gt;circle&lt;/option&gt;
                &lt;option value="triangle"&gt;triangle&lt;/option&gt;
                &lt;/select&gt;

        Color: &lt;select name="color"&gt;
                &lt;option value="red"&gt;red&lt;/option&gt;
                &lt;option value="green"&gt;green&lt;/option&gt;
                &lt;option value="blue"&gt;blue&lt;/option&gt;
                &lt;/select&gt;

        &lt;input type="submit" name="submit" value="Add Shape" /&gt;
&lt;/form&gt;

Direct Database Access: &lt;a href="shapes"&gt;click here&lt;/a&gt;&lt;br/&gt;

&lt;h3&gt;Current Shapes in database:&lt;/h3&gt;
&lt;% IF shapes.size == 0 %&gt;
  Database is empty. Please add some shapes.
&lt;% ELSE %&gt;
  &lt;% FOREACH s IN shapes %&gt;
    &lt;% s.count %&gt; &lt;% s.color %&gt; &lt;% s.shape %&gt;&lt;% s.count&gt;1 ? 's' : '' %&gt;
    &lt;br/&gt;
  &lt;% END %&gt;
&lt;% END %&gt;

&lt;/body&gt;
&lt;/html&gt;
EOF

get '/' =&gt; sub {
        my $t = engine 'template';
        my $sql="SELECT shape,color,count(id) AS count FROM shapes GROUP BY shape,color";
        my $s = database-&gt;prepare($sql);
        $s-&gt;execute();
        my $shapes = $s-&gt;fetchall_arrayref({}) ;
        return $t-&gt;render(\$index_template, { shapes =&gt; $shapes } );
};

post '/add' =&gt; sub {
        my $shape = params-&gt;{shape} or die "missing shape parameter";
        my $color = params-&gt;{color} or die "missing color parameter";
        $shape =~ s/[^\w]//g; # minimal input sanitization
        $color =~ s/[^\w]//g;
        database-&gt;quick_insert( 'shapes', { shape=&gt;$shape, color=&gt;$color } );

        ## The shape was added to the DB, send to user back to the main page.
        redirect '/';
};

simple_crud (
        record_title =&gt; 'Shape',
        prefix =&gt; '/shapes',
        db_table =&gt; 'shapes',
        editable =&gt; 1,
        deletable =&gt; 1,
        sortable =&gt; 1
);

##
## On-time application initialization: create the database
##
sub init_db
{
        ## Create a SHAPE table if it doesn't exist
        my $sql=&lt;&lt;EOF;
        CREATE TABLE IF NOT EXISTS shapes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                shape TEXT,
                color TEXT,
                time TIMESTAMP default CURRENT_TIMESTAMP )
EOF
        database-&gt;do($sql);
}

init_db;
dance;</pre>

<p>Source:  <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/plugins.txt">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/plugins.txt</a>.</p>
<p><b>Notables</b>:</p>
<ul>
<li>
<p>This example requires the following perl modules: <a href="https://metacpan.org/module/DBD::SQLite">DBD::SQLite</a>,
<a href="https://metacpan.org/module/Dancer::Plugin::Database">Dancer::Plugin::Database</a>, <a href="https://metacpan.org/module/Dancer::Plugin::SimpleCRUD">Dancer::Plugin::SimpleCRUD</a>.</p>
</li>
<li>
<p>The <code>set plugins =&gt; ...</code> statement is equivalent to the following
<code>config.yml</code> stanza:</p>
<pre class="prettyprint">plugins:
   Database:
      driver: 'SQLite'
      database: 'foo.sqlite'</pre>

</li>
<li>
<p>The <code>get</code> and <code>post</code> handlers use the <code>database</code> keyword just like normal
<b>Dancer</b> applications. No special code required.</p>
</li>
<li>
<p><code>init_db</code> creates a new SQLite table, if it doesn't exist. This is not Dancer
specific at all, just makes the example completely self-contained.</p>
</li>
</ul>
<h2><a name="embedding_images_and_files"></a>Embedding images and files</h2>

<p>You can even embed images and files in a self-contained <b>Dancer</b> application
(although, if you've reached the point you do need external files, a
self-contained application is probably not what you want. Still - it's quite
possible):</p>
<pre class="prettyprint">#!/usr/bin/env perl
use strict;
use warnings;
use Dancer;
use MIME::Base64;

set log =&gt; "core";
set logger =&gt; "console";
set warnings =&gt; 1;
set template =&gt; "template_toolkit";

my $index_html=&lt;&lt;EOF;
&lt;html&gt;
&lt;body&gt;

&lt;h1&gt;Hello From Self-Contained Dancer&lt;/h1&gt;
&lt;h2&gt;With embedded files&lt;/h2&gt;

A PNG Star: &lt;img src="&lt;% request.uri_for("/files/star.png") %&gt;"/&gt;
&lt;br/&gt;
A PDF Star: &lt;a href="&lt;% request.uri_for("/files/red_star.pdf") %&gt;" /&gt;Download me!&lt;/a&gt;

&lt;/body&gt;
&lt;/html&gt;

EOF

get '/' =&gt; sub {
        my $t = engine 'template';
        my $r = request ;
        return $t-&gt;render(\$index_html, { request =&gt; $r } );
};


# The stock-star image was made with OpenClipArt's stock-star png file:
#  $ base64 &lt; /usr/share/openclipart/png/computer/icons/stock-star.png
my $openclipart_stock_star=&lt;&lt;EOF;
iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAAN1wAADdcBQiibeAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAAVdEVY
dFRpdGxlAEV0aXF1ZXR0ZSBJY29uc3n31Q4AAAAVdEVYdEF1dGhvcgBBbmR5IEZpdHpzaW1vbta6
3GQAAASmSURBVEiJvZd/aFVlGMe/z/u859xt587t7rqpMxu6NkW9/ri7czlUEqEQpEKy/IFRUEEF
RggOy8SEyMqwkjLIQAqhIOxPUaPSP/zLgoogRebmfk/Nue3u3nPvOefpj52r99p2Ngf6wpdzzvu+
5/s5z/O873u5JCKYStvbUr4IQHz/BwPfTuV9NSUqAGa1U2ves293OT0w8P63IjOVwnYir15r2vDA
wKyxo7x8mrdk6TI3ZPI7DwR84N1I2DR5R3PzGrO5eQ0TeY0H36tYdd/BmunlopAOLV4cQ7Qignm1
tVnT0HvuK/jQ+xU6FNK7lscbNLMHz7ORSDQZSrlPfP5xNHbfwFrTc8xSFYvFIGJDxMasWVWYOXNG
xtBq9714UdA+PvxRlIkwmwg1RHiYmffVPVI/b9Xqxwo++Gr7FZw9d9oDZCcRtRLQQYSrL7x67UYg
+LMPoyVE2EKEuUSo0cx1INSISCUgTARoZtcKh721a9cZZWVlBSYignPnfnIHbv7rZjJpAxAiAkiR
zYp7iNDmee5lInQA+G7zi/2Xbkd85ND0HQR8YpgG1dfXIhy2YFkWwlYYVtiCaZqTSqGIIJ1OYWQk
iVQqiXRqBF3dVzE0eBMAviSi15/Z3ucVpPqrw9O3KkXfzK+vVfH4simdSHe37u4O/PXnb55ADmzc
1vd2rv9/NT52pHK9UvTjnDnVOtG4nInG4U/ijO/oaMeli38LCLue2tx3MH9szMV1/GhVs1J0qrIy
WpRILNXM937AtbddQVtbqwfCKxs29X599/i4q/r7Y1UxZvq5bFppWUNDzNCaJw1tbW2Vnt4eF5At
6zf2/jDWnMDtdOL4jLms6NfikqJZicRiQ6mJI29va5e+/v4MBE8+/nTP6fHmBTpt3NZ3RSnsyWZt
BclAPHtCuW4GmulUEBQA9EQRsMaSsBXyIFkOXk+jg5Zl0vAwNU3kO2HuDK1WlpaGDE9sBCsDTzIo
Lmawkhnnz1RXBvlOGLHWWGaVKIiXKegfHk7Bth1EIhaUurPlQiagNQkICQAnpwQ+e7J6HitYRUWA
eDYAwM64uH496aTTWSZCamg4qSsiJWZpOAQAIAChIs66jtsYBA5MtWY0sIZnGC6yThr91wa97u5b
4jjOBda0gjXNJsinAwPJbG/fQCaVHoEnNoqLlGkY9Gigd9Aga4obBjmDg2lzaMh1iNCtNd5sWNN1
Im/arj/OP/QFIAdu3bKfDZnkMkMzY0WQd2DEhkYTRMxk0h1mphbFVHcXFACwtLmzbcnKzs1aU5Mn
uOC4gGaKXvx9TvU9g4mImGkBgCNnfkkvjK/uOhpf1VVCRBEiqiCiqK8Kv6980YrOfxY2dq6zbdnE
GpeVosZx/fNPLiLSAEwAxqIFRsnzW8O1LXtvtmO0JBoA+yJfwOgGFgCuLweAM7/OwGsvTZv+RsuN
VgBZABkRcQrANPoTFAJg+GBznHsjT7n14frGWQAZX/n3Bc8iYiP3sogIEXkAcnL9MuQiyEUo/riT
VyYvb16+chnw8q7emKn2081+dBqFKdY+LKf8lv/BBSn3I3VExC3gTOZPm1+KsQTcqfFtySRM/wP7
TwAUiu6U1QAAAABJRU5ErkJggg==
EOF

## Cache the binary form of the PNG image, no need to re-decode on every HTTP request.
my $stock_star_bin = decode_base64($openclipart_stock_star);


# I made this red star using InkScape, then used:
#   $ base64 &lt; red_star.pdf
my $red_star_pdf=&lt;&lt;EOF;
JVBERi0xLjUKJbXtrvsKMyAwIG9iago8PCAvTGVuZ3RoIDQgMCBSCiAgIC9GaWx0ZXIgL0ZsYXRl
RGVjb2RlCj4+CnN0cmVhbQp4nG2OTUoDQAyF93OKdwHTTP4mOYEguGhdSheioIhdlC56fTP7MoSE
Ny/fy3VMMLm41e425wqcnnH4YHzfhpDhPhgvXb/j/dwextcwvOKK3uz3tFvapMxaa+LzMtSKqoEW
RWqJC6QnV4dWEc/AH2YEMRtMnDS1FeEktgWVRTOylTGdqaEQDUr3bfJFuhxiQVbSijYgVBtopLw9
O37HSiRZbzfILCn6U3lR1c5Xb2QoNISW7rSfB3e/4TiO4x/aODrYCmVuZHN0cmVhbQplbmRvYmoK
NCAwIG9iagogICAxOTMKZW5kb2JqCjIgMCBvYmoKPDwKICAgL0V4dEdTdGF0ZSA8PAogICAgICAv
YTAgPDwgL0NBIDEgL2NhIDEgPj4KICAgPj4KPj4KZW5kb2JqCjUgMCBvYmoKPDwgL1R5cGUgL1Bh
Z2UKICAgL1BhcmVudCAxIDAgUgogICAvTWVkaWFCb3ggWyAwIDAgNTk1LjI3NTU3NCA4NDEuODg5
NzcxIF0KICAgL0NvbnRlbnRzIDMgMCBSCiAgIC9Hcm91cCA8PAogICAgICAvVHlwZSAvR3JvdXAK
ICAgICAgL1MgL1RyYW5zcGFyZW5jeQogICAgICAvQ1MgL0RldmljZVJHQgogICA+PgogICAvUmVz
b3VyY2VzIDIgMCBSCj4+CmVuZG9iagoxIDAgb2JqCjw8IC9UeXBlIC9QYWdlcwogICAvS2lkcyBb
IDUgMCBSIF0KICAgL0NvdW50IDEKPj4KZW5kb2JqCjYgMCBvYmoKPDwgL0NyZWF0b3IgKGNhaXJv
IDEuMTAuMiAoaHR0cDovL2NhaXJvZ3JhcGhpY3Mub3JnKSkKICAgL1Byb2R1Y2VyIChjYWlybyAx
LjEwLjIgKGh0dHA6Ly9jYWlyb2dyYXBoaWNzLm9yZykpCj4+CmVuZG9iago3IDAgb2JqCjw8IC9U
eXBlIC9DYXRhbG9nCiAgIC9QYWdlcyAxIDAgUgo+PgplbmRvYmoKeHJlZgowIDgKMDAwMDAwMDAw
MCA2NTUzNSBmIAowMDAwMDAwNTkzIDAwMDAwIG4gCjAwMDAwMDAzMDcgMDAwMDAgbiAKMDAwMDAw
MDAxNSAwMDAwMCBuIAowMDAwMDAwMjg1IDAwMDAwIG4gCjAwMDAwMDAzNzkgMDAwMDAgbiAKMDAw
MDAwMDY1OCAwMDAwMCBuIAowMDAwMDAwNzg1IDAwMDAwIG4gCnRyYWlsZXIKPDwgL1NpemUgOAog
ICAvUm9vdCA3IDAgUgogICAvSW5mbyA2IDAgUgo+PgpzdGFydHhyZWYKODM3CiUlRU9GCg==
EOF
my $red_star_pdf_bin = decode_base64($red_star_pdf);

get '/files/:file' =&gt; sub {
        my $file = params-&gt;{file};

        if ( $file eq "star.png" ) {
                header('Content-Type' =&gt; 'image/png');
                return $stock_star_bin;
        }
        if ( $file eq "red_star.pdf" ) {
                header('Content-Type' =&gt; 'application/pdf');
                header('Content-Disposition' =&gt; "attachment; $file" );
                return $red_star_pdf_bin;
        }

        status 'not_found';
        return "File not found";
};

dance;</pre>

<p>Try it: <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/embed.pl">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/embed.pl</a>.</p>
<p>Source:  <a href="http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/embed.txt">http://cancan.cshl.edu/labmembers/gordon/dancer_advent_calendar_2011/embed.txt</a>.</p>
<h2><a name="deployment_with_plackup_starman__etc_"></a>Deployment with Plackup/Starman, etc.</h2>

<p>All the above examples will work as-is with <a href="https://metacpan.org/module/plackup">plackup</a> and <a href="https://metacpan.org/module/Starman">Starman</a>.
Just run:</p>
<pre class="prettyprint">$ plackup -s Starman example1.pl
[19688]  core @0.000759&gt; loading Dancer::Handler::PSGI handler in /usr/local/share/perl/5.12.4/Dancer/Handler.pm l. 41
[19688]  core @0.004706&gt; loading handler 'Dancer::Handler::PSGI' in /usr/local/share/perl/5.12.4/Dancer.pm l. 436
2011/11/29-16:19:45 Starman::Server (type Net::Server::PreFork) starting! pid(19688)
Binding to TCP port 5000 on host *
Setting gid to "1000 1000 20 24 25 27 29 33 44 46 110 115 123 124 1000 1001 1002 1008"</pre>

<p>Then visit <a href="http://localhost:5000">http://localhost:5000</a> or setup an Apache/nginx/lighttpd proxy to
your <b>Dancer</b> daemon. See &lt;Dancer::Deployment&gt; for more details and examples.</p>
<h2><a name="deployment_as_cgi_script"></a>Deployment as CGI script</h2>

<p>Not very efficient, but easy to deploy. In a self-contained <b>Dancer</b>
application, simply change the last <code>dance;</code> statement to the following:</p>
<pre class="prettyprint">#!/usr/bin/env perl
use strict;
use warnings;
use Dancer;
use Plack::Runner;

get '/' =&gt; sub {
        return&lt;&lt;EOF;
&lt;html&gt;
&lt;body&gt;
&lt;H1&gt;Dance Dance Revolution!&lt;/h1&gt;
This is a self-contained Dancer application, served as a CGI script.
&lt;body&gt;
&lt;/html&gt;
EOF
};


my $app = sub {
        my $env = shift ;
        my $request = Dancer::Request-&gt;new ( env =&gt; $env ) ;
        Dancer-&gt;dance($request);
};
Plack::Runner-&gt;run($app);</pre>

<p><b>Notables</b>:</p>
<ul>
<li>
<p>This example requires the <a href="https://metacpan.org/module/Plack::Runner">Plack::Runner</a> perl module.</p>
</li>
<li>
<p>The <b>apache</b> configuration to run this CGI script will be something like:</p>
<pre class="prettyprint">Alias /selfdance/ "/home/gordon/projects/perl_dancer_test/self_contained/"
&lt;Directory "/home/gordon/projects/perl_dancer_test/self_contained/"&gt;
        AddHandler cgi-script .cgi
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        DirectoryIndex self2.cgi
&lt;/Directory&gt;
ReWriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^/selfdance/(.*)$ /home/gordon/projects/perl_dancer_test/self_contained/self2.cgi/$1 [QSA,L]</pre>

</li>
<li>
<p>See <a href="https://metacpan.org/module/Dancer::Deployment">Dancer::Deployment</a> for more details.</p>
</li>
</ul>
<h2><a name="deployment_as_fast_cgi_script"></a>Deployment as Fast-CGI script</h2>

<pre class="prettyprint">#!/usr/bin/env perl
use strict;
use warnings;
use Dancer;
use Plack::Handler::FCGI;

get '/' =&gt; sub {
        return&lt;&lt;EOF;
&lt;html&gt;
&lt;body&gt;
&lt;H1&gt;Dance Dance Revolution!&lt;/h1&gt;
This is a self-contained Dancer application, served as a CGI script.
&lt;body&gt;
&lt;/html&gt;
EOF
};

my $app = sub {
        Dancer-&gt;dance($request);
};
my $server = Plack::Handler::FCGI-&gt;new(nproc =&gt; 5, detach =&gt; 1);
$server-&gt;run($app);</pre>

<p><b>Notables</b>:</p>
<ul>
<li>
<p>This example requires the <a href="https://metacpan.org/module/Plack::Handler::FCGI">Plack::Handler::FCGI</a> perl module.</p>
</li>
<li>
<p>The <b>apache</b> configuration to run this CGI script will be something like:</p>
<pre class="prettyprint">Alias /selfdancefast/ "/home/gordon/projects/perl_dancer_test/self_contained/"
&lt;Directory "/home/gordon/projects/perl_dancer_test/self_contained/"&gt;
         AddHandler fcgid-script .fcgi
         AllowOverride None
         Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
         DirectoryIndex self3.fcgi
&lt;/Directory&gt;
ReWriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^/selfdancefast/(.*)$ /home/gordon/projects/perl_dancer_test/self_contained/self3.fcgi/$1 [QSA,L]</pre>

</li>
<li>
<p>See <a href="https://metacpan.org/module/Dancer::Deployment">Dancer::Deployment</a> for more details.</p>
</li>
</ul>
<h1><a name="author"></a>AUTHOR</h1>

<p>This article was kindly written by Assaf Gordon - thanks!</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
