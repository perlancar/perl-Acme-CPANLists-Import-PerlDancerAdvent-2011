<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Easy Database Access with Dancer::Plugin::Database | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2011" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2011">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="easy_database_access_with_dancer__plugin__database"></a>Easy Database Access with Dancer::Plugin::Database</h1>

<p>In last year's calendar, I wrote a basic post on
<a href="http://advent.perldancer.org/2010/4">Database Connections with Dancer::Plugin::Database</a>.</p>
<p>The article covered how to connect to databases using
<a href="https://metacpan.org/module/Dancer::Plugin::Database">Dancer::Plugin::Database</a>, but not how to make use of any of the extra
convenience methods (which hadn't been added at that time).</p>
<h1><a name="why_would_i_use_dancer__plugin__database"></a>Why would I use Dancer::Plugin::Database</h1>

<p>So - why use <a href="https://metacpan.org/module/Dancer::Plugin::Database">Dancer::Plugin::Database</a> at all?  Why not just use DBI directly?</p>
<ul>
<li><a name="item_It_manages_database_connections_for_you"></a><b>It manages database connections for you</b>
<p>When you call the <code>database()</code> keyword, Dancer::Plugin::Database will return a
database handle, connecting first if needed, or if an existing connection is
available, checking it's still usable then giving you that handle.  It takes
care to ensure that database handles are not shared between different processes
or threads, which would often lead to Bad Things happening.</p>
</li>
<li><a name="item_It_s_easily_configurable"></a><b>It's easily configurable</b>
<p>You can define your database connection details in your application config,
where they belong, and simply use the <code>database()</code> keyword where you need a
database handle to use.  If you need connections to multiple databases, it's
easy to declare multiple connections in your configuration, then pass a name to
the <code>database</code> keyword when you call it - e.g. <code>database('foo')</code>.</p>
</li>
<li><a name="item_It_makes_the_common_stuff_very_easy"></a><b>It makes the common stuff very easy</b>
<p>In many web apps, you'll find yourself doing certain basic queries very often,
and writing the SQL for them each time gets very tedious.  What you get when you
call <code>database()</code> isn't actually a vanilla <a href="https://metacpan.org/module/DBI">DBI</a> <code>DBI::db</code> database handle -
it's actually a <a href="https://metacpan.org/module/Dancer::Plugin::Database::Handle">Dancer::Plugin::Database::Handle</a> object, which subclasses
<code>DBI::db</code> and provides additional convenience methods.  This means you can use
it exactly as you would a normal DBI database handle, but also have extra
convenience methods available, letting you do the simple stuff easily without
writing SQL:</p>
<p><code>quick_select</code> lets you quickly find a record, for example:</p>
<pre class="prettyprint"># Fetch the user whose ID is 42 (scalar context means we'll only get one
# record).
# Roughly equivalent to SELECT * FROM users WHERE id = 42 (but using
# placeholders for safety)
my $user = database-&gt;quick_select('users', { id =&gt; 42 });

# In list context, get multiple results:
my @admins = database-&gt;quick_select('users', { is_admin =&gt; 1 });</pre>

<p><code>quick_update</code> lets you quickly update records, for example:</p>
<pre class="prettyprint"># Update the email address for the user whose ID is 42:
database-&gt;quick_update('users', { id =&gt; 42 }, { email =&gt; 'new@email.com'});</pre>

<p><code>quick_lookup</code> lets you quickly get a specific field from a record:</p>
<pre class="prettyprint"># Get just the email address of a user:
my $email = database-&gt;quick_lookup('users', { id =&gt; 42 }, 'email');</pre>

<p>Using the convenience methods mentioned above helps make life easy, and care is
taken by <a href="https://metacpan.org/module/Dancer::Plugin::Database">Dancer::Plugin::Database</a> to always use placeholders (parameters)
rather than interpolation, to avoid you falling victim to SQL injection attacks
(obligatory <a href="http://bobby-tables.com/">bobby-tables.com</a> link).</p>
</li>
<li><a name="item_It_doesn_t_get_in_your_way"></a><b>It doesn't get in your way</b>
<p>You don't have to use the convenience methods; naturally, there will be many
cases where any attempt at SQL abstraction will get in your way, and you just
want to write a query yourself.  You get a (subclassed) DBI database handle
which you can use in whatever way you want.</p>
</li>
</ul>
<p>Of course, there are other options; if you're a <a href="https://metacpan.org/module/DBIx::Class">DBIx::Class</a> fan, look at
<a href="https://metacpan.org/module/Dancer::Plugin::DBIC">Dancer::Plugin::DBIC</a> instead.</p>
<h1><a name="author"></a>AUTHOR</h1>

<p>David Precious, <code>&lt;davidp@preshweb.co.uk&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
