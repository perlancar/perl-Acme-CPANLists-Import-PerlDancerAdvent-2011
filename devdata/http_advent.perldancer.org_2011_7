<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Building a blog engine using Perl Dancer | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2011" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2011">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="building_a_blog_engine_using_perl_dancer"></a>Building a blog engine using Perl Dancer</h1>

<p>In this <a href="http://www.youtube.com/watch?v=NGX5pgKWVoc">screencast</a> we 
build a simple blog engine using Dancer.</p>
<p>If you are on MS Windows start by downloading <a href="http://padre.perlide.org/">Padre on Strawberry Perl</a>
which already has everything we need. On other systems you'll have to install 
<a href="https://metacpan.org/module/Dancer">Dancer</a>, <a href="https://metacpan.org/module/File::Slurp">File::Slurp</a> and <a href="https://metacpan.org/module/Template::Toolkit">Template::Toolkit</a>.</p>
<iframe width="500" height="390" src="http://www.youtube.com/embed/NGX5pgKWVoc" frameborder="0" allowfullscreen></iframe>

<p>The application we build is going to be called <a href="http://dwimmer.org/">Dwimmer</a>. 
We need to use the command line to build the skeleton of our application by 
typing in</p>
<pre class="prettyprint">dancer -a Dwimmer</pre>

<p>This will create a directory called Dwimmer and all the files necessary to 
build a Dancer application.</p>
<p>The <code>bin/app.pl</code> file is just a simple launcher for a web server on port 3000</p>
<p>The real code is in <code>lib/Dwimmer.pm</code></p>
<p>The templates are in the <code>views/</code>  directory.</p>
<p>This is the full code:</p>
<pre class="prettyprint">package Dwimmer;
use Dancer ':syntax';

use File::Slurp qw(read_file write_file);

our $VERSION = '0.01';

get '/' =&gt; sub {
    my $filename = config-&gt;{dwimmer}{json};
    my $json = -e $filename ? read_file $filename : '{}';
    my $data = from_json $json;
    template 'index', {data =&gt; $data};
};


get '/page' =&gt; sub {
    template 'page';
};

post '/page' =&gt;  sub {
    my $filename = config-&gt;{dwimmer}{json};
    my $json = -e $filename ? read_file $filename : '{}';
    my $data = from_json $json;
    my $now   = time;
    $data-&gt;{$now} = {
        title =&gt; params-&gt;{title},
        text  =&gt; params-&gt;{text},
    };

    write_file $filename, to_json($data);
    redirect '/';
};

true;</pre>

<p>The module <a href="https://metacpan.org/module/File::Slurp">File::Slurp</a> provides two functions for reading and writing files
in a simple way.</p>
<p>Dancer is route based so you for each page out there you need to define a route. 
You can even differentiate between the HTTP METHOD types such as <code>GET</code> 
and <code>POST</code> though they are written in lower case in Dancer.</p>
<p>We changed the config.yml file in the root of the application. Commented out the</p>
<pre class="prettyprint"># template: "simple"</pre>

<p>and enabled</p>
<pre class="prettyprint">template: "template_toolkit"
engines:
  template_toolkit:
    encoding:  'utf8'</pre>

<p>Later we also added the following</p>
<pre class="prettyprint">dwimmer:
  json: c:\work\dwimmer.json</pre>

<p>to set where the json "database" is located. (Our home made NoSQL database.)</p>
<p>We edited the file <code>views/index.tt</code> file replacing all of its content with
simple HTML linking to the <i>page</i>.</p>
<pre class="prettyprint">Hi
&lt;a href="/page"&gt;add a new entry&lt;/a&gt;</pre>

<p>clicking on that link would generate a 404-error so we also created a route to
serve the request:</p>
<pre class="prettyprint">get '/page' =&gt; sub {
  template 'page';
};</pre>

<p>The page template is a simple form:</p>
<pre class="prettyprint">&lt;form method="POST"&gt;
&lt;input name="title" size="80"/&gt;&lt;br /&gt;
&lt;textarea name="text" rows="20" cols="80"&gt;
&lt;/textarea&gt;&lt;br /&gt;
&lt;input type="submit" value="Post" /&gt;
&lt;/form&gt;</pre>

<p>Note we set the submission method to be POST! Hence when you submit this form
you get a 404 error. We have to implement a separate route to handle this post 
request:</p>
<pre class="prettyprint">post '/page' =&gt;  sub {
  my $filename = config-&gt;{dwimmer}{json};
  my $json = -e $filename ? read_file $filename : '{}';
  my $data = from_json $json;
  my $now   = time;
  $data-&gt;{$now} = {
      title =&gt; params-&gt;{title},
      text  =&gt; params-&gt;{text},
  };

  write_file $filename, to_json($data);
  redirect '/';
};</pre>

<p>In this code the <i>config</i> method returns the all the configuration options
where we already saved the name of the json file.
<code>-e $filename</code> checks if the file exists. If it does, we read it in to the 
<code>$json</code> variable; if not then we assign to it a JSON string representing an 
empty hash.</p>
<pre class="prettyprint">my $json = -e $filename ? read_file $filename : '{}';</pre>

<p><code>from_json</code> is a built-in Dancer function turning a json string into a Perl 
data structure.</p>
<p>We then add a new entry to our "database" with the key being the timestamp and having
a hash containing the title and text as received from the user.</p>
<pre class="prettyprint">write_file $filename, to_json($data);</pre>

<p>This will write back the whole data structure after turning it into a json file.</p>
<p>The last line redirects the user to the main page.</p>
<p>This code will save the new blog submission to the json file but won't display yet.</p>
<p>For that we changed the main route copying the data reading code to it.
It then passes the data to the template call.</p>
<pre class="prettyprint">get '/' =&gt; sub {
  my $filename = config-&gt;{dwimmer}{json};
  my $json = -e $filename ? read_file $filename : '{}';
  my $data = from_json $json;
  template 'index', {data =&gt; $data};
};</pre>

<p>The <code>index.tt</code> template itself had to be changed as well to include this:</p>
<pre class="prettyprint">&lt;% FOR e IN data.keys.sort %&gt;
  &lt;hr /&gt;
  &lt;h2&gt;&lt;% data.$e.title %&gt;&lt;/h2&gt;
  &lt;% data.$e.text %&gt;
&lt;% END %&gt;</pre>

<p>Which will display all the results from the data hash.</p>
<p>That's it. <a href="http://dwimmer.org/">Dwimmer</a> is ready.</p>
<p>Well, sort of.</p>
<h1><a name="author"></a>AUTHOR</h1>

<p><a href="http://szabgab.com/">Gabor Szabo</a>, <code>&lt;szabgab@gmail.com&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
