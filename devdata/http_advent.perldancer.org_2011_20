<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> High-performance Dancer apps | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2011" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2011">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="high_performance_dancer_apps"></a>High-performance Dancer apps</h1>

<p>Using or considering using Dancer in a high-traffic environment?  There are some
techniques you can use to help ensure good performance, which will be documented
here.</p>
<p>Some of these tips are based on a Dancer application in production at work -
in a couple of months it's answered over 40 million requests for several hundred
thousand individual domain names, so it's battle-proven.</p>
<h2><a name="handle_static_files_via_the_webserver"></a>Handle static files via the webserver</h2>

<p>For performance, you want your application's static files (images, Javascript,
CSS etc) to be served up by your webserver, e.g. Nginx, rather than being passed
to your Dancer app to serve.</p>
<p>A short example Nginx configuration:</p>
<pre class="prettyprint">server {
    listen 80;
    server_name foo.example.com;

    location / {
        # Serve static files directly:
        if (-f $request_filename) {
            expires 30d;
            break;
        }

        # Pass on other requests to Dancer app
        proxy_pass_header Server;
        proxy_pass http://localhost:3000/;
    }
}</pre>

<p>Similiar configuration methods should work with other deployment methods.</p>
<h2><a name="run_under_a_suitable_backend"></a>Run under a suitable backend</h2>

<p>For high-load situations, you'll want to be running under a suitable Plack
back-end.  <a href="https://metacpan.org/module/Starman">Starman</a> is a very high performance backend, and is recommended.</p>
<p>A simple "hello world" benchmark test in the Starman documentation shows it
capable of handling over 6800 requests per second.  Naturally, with a real-world
more complex app, you're not going to achieve quite that level of performance.</p>
<h2><a name="pre_load_your_application"></a>Pre-load your application</h2>

<p>When running with Starman, you can pre-load your application before forking 
worker processes, to increase performance and provide memory savings with
copy-on-write memory management.</p>
<p>Use Starman's <code>--preload-app</code> option to enable this (but be aware that this can
cause Bad Things to happen if resources like database connections or other
sockets are opened by your app at compile time, as they will be unintentionally
shared amongst child processes.  <a href="https://metacpan.org/module/Dancer::Plugin::Database">Dancer::Plugin::Database</a> contains code to
ensure fork/thread safety, so you should be safe if using that plugin to manage
your database connections.</p>
<p>You can also pre-load individual modules using <code>plackup</code>'s <code>-M</code> for similar
effect:</p>
<pre class="prettyprint">starman -MDancer -MMoose -MFoo myapp.psgi</pre>

<h2><a name="caching"></a>Caching</h2>

<p>Using <a href="https://metacpan.org/module/Dancer::Plugin::Cache::CHI">Dancer::Plugin::Cache::CHI</a> to cache data and responses as much as
possible (using a backend like Memcached) can save a lot of execution time, and
help your application to handle more requests, faster.</p>
<p>A simple example to cache a whole page response:</p>
<pre class="prettyprint"># Arrange for the cache to be consulted for a matching response before route
# handlers are invoked:
check_page_cache();

get '/foo' =&gt; sub {
    my $data = some_expensive_slow_function();
    my $content = template 'foo', $data;
    cache_page $content;
    return $content;
};</pre>

<h2><a name="profile_your_app_to_find_bottlenecks"></a>Profile your app to find bottlenecks</h2>

<p>As <a href="http://advent.perldancer.org/2011/9">covered previously</a>,
<a href="https://metacpan.org/module/Dancer::Plugin::NYTProf">Dancer::Plugin::NYTProf</a> can be useful to profile your Dancer applications and
see where time is spent to identify bottlenecks where a little optimisation can
pay off.</p>
<h1><a name="author"></a>AUTHOR</h1>

<p>David Precious, <code>&lt;davidp@preshweb.co.uk&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
