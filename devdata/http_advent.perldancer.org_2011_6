<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Flexible exceptions handling with Dancer::Exception | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2011" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2011">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="flexible_exceptions_handling_with_dancer__exception"></a>Flexible exceptions handling with Dancer::Exception</h1>

<p>Among the new features added in Dancer, here is an important albeit not very
visible one.</p>
<p>When running a Dancer application, sometimes things get wrong, and an exception
is raised. In earlier versions, Dancer was using <code>croak</code>. That's not bad, but
when trying to catch an exception, it's not trivial to programatically know if
it was raised by Dancer's code, or the web application's code, or some other
module used.</p>
<p>Now, all exceptions raised in Dancer's code are <a href="https://metacpan.org/module/Dancer::Exception">Dancer::Exception</a>s. It's
also possible for the developer of the web application to create and raise
their own Dancer::Exception.</p>
<p>Technically, a Dancer's exception is an object inheriting from
<a href="https://metacpan.org/module/Dancer::Exception::Base">Dancer::Exception::Base</a>, but may be composed from different roles, enabling
different <i>flavours</i> of exceptions. There is one special flavour, called
'Core'. All exceptions raised by Dancer's core code are of this flavour, or
derive from it. Dancer users are able to create new flavours, and new
exceptions of these flavours.</p>
<h1><a name="catch_dancer_s_core_exceptions"></a>Catch Dancer's core exceptions</h1>

<p>First things first, exceptions means that there is a way to catch them. For
that, Dancer technically relies on the very good <a href="https://metacpan.org/module/Try::Tiny">Try::Tiny</a>, but provides
itself a slightly modified version of <code>try</code> and <code>catch</code>. Just use
<a href="https://metacpan.org/module/Dancer::Exception">Dancer::Exception</a> and you're set.</p>
<h2><a name="try_and_catch_exceptions"></a>Try and catch exceptions</h2>

<pre class="prettyprint">use Dancer;
use Dancer::Exception qw(:all);

get '/' =&gt; sub {
    try {
        do_some_stuff();
    } catch {
        # ah, something bad happened
    };
};</pre>

<p><b>Beware</b>, the <code>try</code> and <code>catch</code> syntax requires to append a semi-colon <code>;</code>
at the end.</p>
<h2><a name="core_or_non_core_exceptions_"></a>Core or non core exceptions ?</h2>

<p>When catching an exception, one of the first thing to do is testing if it's a
core exception (coming from Dancer's code). To do that, use the <code>does</code>
keyword:</p>
<pre class="prettyprint">use Dancer;
use Dancer::Exception qw(:all);

get '/' =&gt; sub {
    try {
        do_some_stuff();
    } catch {
        my ($exception) = @_;
        if ($exception-&gt;does('Core')) {
          # issues appeared in Dancer's code
          say "got a core exception: " . $exception-&gt;message;
          $exception-&gt;rethrow;
        } else 
          # handle the issue
        }
    };
};</pre>

<p>This example shows the usage of:</p>
<ul>
<li><a name="item_does"></a><b>does</b>
<p>used to test the flavour of an exception</p>
</li>
<li><a name="item_rethrow"></a><b>rethrow</b>
<p>if you just caught an exception, but you actually don't want to handle it, just
<code>rethrow</code> it! It'll still come from the point it was originally emited from.</p>
</li>
<li><a name="item_message"></a><b>message</b>
<p>exceptions contain a message, and the &lt;message()&gt; method returns it as a
string. However, Dancer's exception objects overload stringification and string
comparison just fine, so you can just <code>print $exception</code></p>
</li>
</ul>
<h1><a name="create_your_own_exceptions"></a>Create your own exceptions</h1>

<p><a href="https://metacpan.org/module/Dancer::Exception">Dancer::Exception</a> would be of limited use if it were just there to properly
raise core exceptions. It is also possible for Dancer web developers to register
new exception flavours, raise these exceptions, and catch and test them.</p>
<h2><a name="register_your_custom_exception"></a>Register your custom exception</h2>

<p>Before being able to raise a home made exception, you need to register it.
Every exception has a message, but Dancer exceptions actually have a message
pattern. Let's see what that means in an example:</p>
<pre class="prettyprint">use Dancer::Exception qw(:all);
register_exception('NoPermission',
                    message_pattern =&gt; "not enough permission: %s"
                  );</pre>

<p>This will register a new kind of exception, that can be raised if the user
tries to access a part of a website he doesn't have permission to.</p>
<p>It's also possible to register new exceptions that are composed from other
exceptions. We can consider that the 'NoPermission' exception is too vague, and
we need two sub exceptions to specify if the login or the password was wrong:</p>
<pre class="prettyprint">register_exception('InvalidLogin',
                    message_pattern =&gt; "invalid login '%s'"
                    composed_from =&gt; [ 'NoPermission' ]
                  );

register_exception('InvalidPassword',
                    message_pattern =&gt; "invalid password"
                    composed_from =&gt; [ 'NoPermission' ]
                  );</pre>

<p>See how we set the message pattern?  We want to display the wrong login, but
not the wrong password.</p>
<p>Now, take a look at this piece of code:</p>
<pre class="prettyprint">use Dancer;
use Dancer::Exception qw(:all);

any ['get', 'post'] =&gt; '/login' =&gt; sub {
  try {
      _login(params-&gt;{'login'}, params-&gt;{'password'});
  } catch {
      my ($exception) = @_;
      if ($exception-&gt;does('NoPermission')) {
          # deal with it
          template 'no permission',
          { message =&gt; $exception-&gt;message }
      } else {
          # we can't handle this
          $exception-&gt;rethrow;
      }
  };
}</pre>

<p>What's great is that if the exception was an <code>InvalidLogin</code>, the message
returnd by <code>&lt;$exception-</code>message&gt;&gt; will be:</p>
<pre class="prettyprint">"not enough permission: invalid login 'foo'"</pre>

<p>That's because message patterns are called one by one bottom up. But to fully
understand the effect, one must see the function <code>_login</code>, which shows how to
<b>raise</b> an exception.</p>
<h2><a name="raise_a_custom_exception"></a>Raise a custom exception</h2>

<p>Now that we have registered some exceptions, and seen how to catch them, let's
see how to raise them. It's simple, it's done using the <code>raise</code> keyword:</p>
<pre class="prettyprint">sub _login {
    my ($login, $password) = @_;
    _check($login)
      or raise InvalidLogin =&gt; $login;
    _check_credential($login,$password)
      or raise 'InvalidPassword';
}</pre>

<p><code>raise</code> takes one or two parameters: the name of the exception's flavour, and
the parameter to its message pattern. Here we pass the login to the <code>InvalidLogin</code>.</p>
<h1><a name="dancer_exceptions_are_not_dancer_errors"></a>Dancer exceptions are not Dancer errors</h1>

<p>On common mistake is to think that Dancer exceptions are the same than Dancer
errors. They are not. Dancer::Exceptions are thrown when something goes wrong,
either in core code, or the application code. They can be used to signify some
malfunction, but can be properly handled by the application, or not.</p>
<p>A <a href="https://metacpan.org/module/Dancer::Error">Dancer::Error</a> can be roughly seen as an object representation of an HTTP
error. So it's what you want your application to send to your end users. When a
<a href="https://metacpan.org/module/Dancer::Error">Dancer::Error</a> object is generated, Dancer's workflow is almost at its end.
It's possible to add hooks to execute some code before or after a
<a href="https://metacpan.org/module/Dancer::Error">Dancer::Error</a> generation, but it's not handy for exception handling.</p>
<p>You should however note that when a Dancer::Exception is not caught by the
application, it'll eventually be caught by Dancer's code internally, and a
Dancer::Error will be generated, and sent to the end user.</p>
<h1><a name="conclusion"></a>Conclusion</h1>

<p>I think that's a good first demonstration of what <a href="https://metacpan.org/module/Dancer::Exception">Dancer::Exception</a> can do
for you. As a bonus, here is the list of core exceptions that Dancer's core
code uses, along with their message patterns:</p>
<pre class="prettyprint">Core  'core - %s'
Core::App  'app - %s'
Core::Config  'config - %s'
Core::Deprecation  'deprecation - %s'
Core::Engine  'engine - %s'
Core::Factory  'factory - %s'
Core::Factory::Hook  'hook - %s'
Core::Hook  'hook - %s'
Core::Fileutils  'file utils - %s'
Core::Handler  'handler - %s'
Core::Handler::PSGI  'handler - %s'
Core::Plugin  'plugin - %s'
Core::Renderer  'renderer - %s'
Core::Route  'route - %s'
Core::Serializer  'serializer - %s'
Core::Template  'template - %s'
Core::Session  'session - %s'</pre>

<p>So, when a core exception happens in a renderer, you'll see a message like:</p>
<pre class="prettyprint">core - renderer - the frobnicator didn't frob properly</pre>

<h1><a name="author"></a>AUTHOR</h1>

<p>Damien Krotkine, <code>&lt;dams@zarb.org&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
